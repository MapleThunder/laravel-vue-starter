#!/bin/bash

# Detect platform
OS_TYPE=$(uname)
# sed is called differently on Linux and MacOS so I need to account for that.
if [[ "$OS_TYPE" == "Darwin" ]]; then
    SED_INPLACE="sed -i ''"
elif [[ "$OS_TYPE" == "Linux" ]]; then
    SED_INPLACE="sed -i"
else
    echo "Unsupported OS: $OS_TYPE"
    exit 1
fi

# Ask if user wants a fresh setup
read -p "Do you want a fresh database setup? This will remove existing data. [y/N]: " fresh_setup
fresh_setup=${fresh_setup:-N}

# Get database credentials from user
read -p "DB Name [db]: " db_name
db_name=${db_name:-db}

read -p "DB User [user]: " db_user
db_user=${db_user:-user}

read -s -p "DB Password [secret]: " input
echo
db_pw=${input:-secret}

if [[ "$fresh_setup" =~ ^[Yy]$ ]]; then
  rm .env .env.testing
fi
# Create .env file if it doesn't exist
if [ ! -f ".env" ]; then
  cp .env.example .env
fi
# Create .env.testing file if it doesn't exist
if [ ! -f ".env.testing" ]; then
  cp .env.example .env.testing
fi

# Function to set or replace env variable
set_env_var() {
  var_name=$1
  var_value=$2
  env_file=$3
  if grep -q "^${var_name}=" "${env_file}"; then
    eval $SED_INPLACE "s/^${var_name}=.*/${var_name}=${var_value}/" "${env_file}"
  else
    echo "${var_name}=${var_value}" >> "${env_file}"
  fi
}

# Set variables
set_env_var "DB_DATABASE" "$db_name" ".env"
set_env_var "DB_USERNAME" "$db_user" ".env"
set_env_var "DB_PASSWORD" "$db_pw" ".env"

set_env_var "DB_CONNECTION" "sqlite" ".env.testing"
set_env_var "DB_DATABASE" ":memory:" ".env.testing"

# Comment out the unneeded database fields in the testing file
eval $SED_INPLACE "/^DB_USERNAME=/s/^/#/" .env.testing
eval $SED_INPLACE "/^DB_PASSWORD=/s/^/#/" .env.testing
eval $SED_INPLACE "/^DB_HOST=/s/^/#/" .env.testing
eval $SED_INPLACE "/^DB_PORT=/s/^/#/" .env.testing

# Install dependencies
composer install
pnpm install && pnpm build

# Clean up for fresh setup if requested
if [[ "$fresh_setup" =~ ^[Yy]$ ]]; then
    echo "Cleaning up existing containers and volumes for fresh setup..."
    docker compose down -v
fi

# Build and start containers
docker compose build

if [[ "$fresh_setup" =~ ^[Yy]$ ]]; then
  # Start only the database initially
  docker compose up -d db
  # Wait for database
  # wait_for_db
  # Generate app key in a temporary container
  docker compose run --rm app php artisan key:generate
  docker compose run --rm app php artisan key:generate --env=testing
fi

docker compose up -d

# Clear any cached config
docker compose exec app php artisan config:clear

# Migrate database tables and generate app keys
docker compose exec app php artisan migrate --force

echo "Setup complete! Your application should be available at http://localhost:8080"